// Generated by gencpp from file nist_gear/Shipment.msg
// DO NOT EDIT!


#ifndef NIST_GEAR_MESSAGE_SHIPMENT_H
#define NIST_GEAR_MESSAGE_SHIPMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nist_gear/Product.h>

namespace nist_gear
{
template <class ContainerAllocator>
struct Shipment_
{
  typedef Shipment_<ContainerAllocator> Type;

  Shipment_()
    : shipment_type()
    , agv_id()
    , products()  {
    }
  Shipment_(const ContainerAllocator& _alloc)
    : shipment_type(_alloc)
    , agv_id(_alloc)
    , products(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _shipment_type_type;
  _shipment_type_type shipment_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _agv_id_type;
  _agv_id_type agv_id;

   typedef std::vector< ::nist_gear::Product_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::nist_gear::Product_<ContainerAllocator> >::other >  _products_type;
  _products_type products;





  typedef boost::shared_ptr< ::nist_gear::Shipment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nist_gear::Shipment_<ContainerAllocator> const> ConstPtr;

}; // struct Shipment_

typedef ::nist_gear::Shipment_<std::allocator<void> > Shipment;

typedef boost::shared_ptr< ::nist_gear::Shipment > ShipmentPtr;
typedef boost::shared_ptr< ::nist_gear::Shipment const> ShipmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nist_gear::Shipment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nist_gear::Shipment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nist_gear::Shipment_<ContainerAllocator1> & lhs, const ::nist_gear::Shipment_<ContainerAllocator2> & rhs)
{
  return lhs.shipment_type == rhs.shipment_type &&
    lhs.agv_id == rhs.agv_id &&
    lhs.products == rhs.products;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nist_gear::Shipment_<ContainerAllocator1> & lhs, const ::nist_gear::Shipment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nist_gear

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nist_gear::Shipment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nist_gear::Shipment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nist_gear::Shipment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nist_gear::Shipment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nist_gear::Shipment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nist_gear::Shipment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nist_gear::Shipment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "484213c903d81e9a6637b4075260ff0a";
  }

  static const char* value(const ::nist_gear::Shipment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x484213c903d81e9aULL;
  static const uint64_t static_value2 = 0x6637b4075260ff0aULL;
};

template<class ContainerAllocator>
struct DataType< ::nist_gear::Shipment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nist_gear/Shipment";
  }

  static const char* value(const ::nist_gear::Shipment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nist_gear::Shipment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Shipment message\n"
"# This structure contains the information of shipment.\n"
"\n"
"# The type of shipment\n"
"string shipment_type\n"
"\n"
"# ID used to say which AGV the shipment must be delivered to\n"
"# Possible values are \"agv1\", \"agv2\", or \"any\"\n"
"string agv_id\n"
"\n"
"# Collection of products\n"
"Product[] products\n"
"\n"
"================================================================================\n"
"MSG: nist_gear/Product\n"
"# Product message\n"
"# This structure contains the information of an product contained in a shipment.\n"
"\n"
"# Product type\n"
"string type\n"
"\n"
"# Target pose\n"
"geometry_msgs/Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::nist_gear::Shipment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nist_gear::Shipment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.shipment_type);
      stream.next(m.agv_id);
      stream.next(m.products);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Shipment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nist_gear::Shipment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nist_gear::Shipment_<ContainerAllocator>& v)
  {
    s << indent << "shipment_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.shipment_type);
    s << indent << "agv_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.agv_id);
    s << indent << "products[]" << std::endl;
    for (size_t i = 0; i < v.products.size(); ++i)
    {
      s << indent << "  products[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nist_gear::Product_<ContainerAllocator> >::stream(s, indent + "    ", v.products[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIST_GEAR_MESSAGE_SHIPMENT_H
